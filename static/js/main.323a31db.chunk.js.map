{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","_props$robot","robot","id","name","email","_","react_default","a","createElement","className","alt","src","concat","CardList","_ref","robots","map","i","components_Card","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","console","log","Component","Header","nextProps","nextState","App","onFetchRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobotsReducer","fetchRobotsReducer","dispatch","event","payload","target","value","fetch","then","response","json","users","catch","fetchRobotsAction","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.323a31db.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n    // We use tachyons for easy styling classes\n    // eslint-disable-next-line\n    const { id, name, _, email } = props.robot;\n    return(\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  //destructure props in parameter\n  return (\n    <div>\n      {robots.map((robot, i) => (\n        <Card key={i} robot={robot} />\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        aria-label=\"Search Robots\"\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"Search Robots\"\n        onChange={searchChange} //onchange, call the searchChange fxn, which was passed in as a prop\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{\n            overflowY: 'scroll',//in proper css, it's overflow-y\n            border: '1px solid black',\n            height: '800px'\n        }}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    //componentDidCatch is a new lifecycle hook for catching errors\n    componentDidCatch(error, info){\n        this.setState({hasError: true});\n        console.log('error', error);\n        console.log('info', info);\n    }\n\n    render(){\n        if(this.state.hasError)\n            return <h1>Oops. That is not good</h1> ;\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from \"react\";\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"f1\">RoboFriends</h1>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport \"./App.css\";\n\nimport { setSearchFieldAction, fetchRobotsAction } from \"../actions\";\nimport Header from \"../components/Header\";\n\n//the state passed in here is the state from the root reducer\nconst mapStateToProps = (state) => ({\n  searchField: state.searchRobotsReducer.searchField,\n  robots: state.fetchRobotsReducer.robots,\n  isPending: state.fetchRobotsReducer.isPending,\n  error: state.fetchRobotsReducer.error,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSearchChange: (event) => dispatch(setSearchFieldAction(event.target.value)),\n  onFetchRobots: () => fetchRobotsAction(dispatch), //could very well have been dispatch(fetchRobotsAction()), but let's preserve our sanity, seeing how the function was actually defined in actions.js\n});\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onFetchRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return isPending ? (\n      <h1 className=\"tc\">Loading...</h1>\n    ) : (\n      <div className=\"tc\">\n        <Header />\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { \n    CHANGE_SEARCHFIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchFieldAction = (text) => ({\n    type: CHANGE_SEARCHFIELD,\n    payload: text\n});\n\nexport const fetchRobotsAction = (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    //do asynchronous call\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => dispatch({ \n            type: REQUEST_ROBOTS_SUCCESS,\n            payload: users\n        }))\n        .catch(error => dispatch({\n            type: REQUEST_ROBOTS_FAILED,\n            payload: error\n        }));\n};"," export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\n export const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\n export const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\n export const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    CHANGE_SEARCHFIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\n//Set up initial state for search\nconst initialStateSearch = {\n    searchField: ''\n};\n\nexport const searchRobotsReducer = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCHFIELD:\n            // merge passed in state and passed in payload and return\n            return Object.assign({}, state, { searchField: action.payload });\n        //we can also destructure using spread operator and return this:\n        //return {...state, searchField: action.payload};\n        default:\n            return state;\n    }\n};\n\n\n//set up initial state for robots\nconst initialStateRobots = {\n    robots: [],\n    isPending: false,\n    error: ''\n}; \n\nexport const fetchRobotsReducer = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return { ...state, isPending: true };\n        case REQUEST_ROBOTS_SUCCESS:\n            return { ...state, robots: action.payload, isPending: false };\n        case REQUEST_ROBOTS_FAILED:\n            return { ...state, error: action.payload, isPending: false };\n        default:\n            return state;\n    }\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\"; //listens for and acts on functions that run in our actions\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\nimport { searchRobotsReducer, fetchRobotsReducer } from \"./reducers\";\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({\n  searchRobotsReducer,\n  fetchRobotsReducer,\n});\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  //Provider component wraps the app, allowing all child components to access the store using connect()\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}